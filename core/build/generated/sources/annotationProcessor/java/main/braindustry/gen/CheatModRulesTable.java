package braindustry.gen;

import arc.util.Strings;

import arc.scene.ui.layout.Table;
import mindustry.game.Rules;

/**
 * Autogenerated file. Do not modify!
 */
public class CheatModRulesTable {
  public static void build(Table table, Rules rules) {
    arc.scene.ui.TextArea textArea;
    table.check("infiniteResources",rules.infiniteResources,(b)->rules.infiniteResources=b);
    table.row();
    table.check("waveTimer",rules.waveTimer,(b)->rules.waveTimer=b);
    table.row();
    table.check("waves",rules.waves,(b)->rules.waves=b);
    table.row();
    table.check("pvp",rules.pvp,(b)->rules.pvp=b);
    table.row();
    table.check("waitEnemies",rules.waitEnemies,(b)->rules.waitEnemies=b);
    table.row();
    table.check("attackMode",rules.attackMode,(b)->rules.attackMode=b);
    table.row();
    table.check("editor",rules.editor,(b)->rules.editor=b);
    table.row();
    table.check("canGameOver",rules.canGameOver,(b)->rules.canGameOver=b);
    table.row();
    table.check("reactorExplosions",rules.reactorExplosions,(b)->rules.reactorExplosions=b);
    table.row();
    table.check("schematicsAllowed",rules.schematicsAllowed,(b)->rules.schematicsAllowed=b);
    table.row();
    table.check("damageExplosions",rules.damageExplosions,(b)->rules.damageExplosions=b);
    table.row();
    table.check("fire",rules.fire,(b)->rules.fire=b);
    table.row();
    table.check("unitAmmo",rules.unitAmmo,(b)->rules.unitAmmo=b);
    table.row();
    table.check("unitCapVariable",rules.unitCapVariable,(b)->rules.unitCapVariable=b);
    table.row();
    table.add("").update(label-> {
      label.setText("unitBuildSpeedMultiplier: "+rules.unitBuildSpeedMultiplier);
    } );
    textArea = table.area(""+rules.unitBuildSpeedMultiplier, text -> rules.unitBuildSpeedMultiplier=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("unitDamageMultiplier: "+rules.unitDamageMultiplier);
    } );
    textArea = table.area(""+rules.unitDamageMultiplier, text -> rules.unitDamageMultiplier=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.check("logicUnitBuild",rules.logicUnitBuild,(b)->rules.logicUnitBuild=b);
    table.row();
    table.add("").update(label-> {
      label.setText("blockHealthMultiplier: "+rules.blockHealthMultiplier);
    } );
    textArea = table.area(""+rules.blockHealthMultiplier, text -> rules.blockHealthMultiplier=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("blockDamageMultiplier: "+rules.blockDamageMultiplier);
    } );
    textArea = table.area(""+rules.blockDamageMultiplier, text -> rules.blockDamageMultiplier=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("buildCostMultiplier: "+rules.buildCostMultiplier);
    } );
    textArea = table.area(""+rules.buildCostMultiplier, text -> rules.buildCostMultiplier=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("buildSpeedMultiplier: "+rules.buildSpeedMultiplier);
    } );
    textArea = table.area(""+rules.buildSpeedMultiplier, text -> rules.buildSpeedMultiplier=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("deconstructRefundMultiplier: "+rules.deconstructRefundMultiplier);
    } );
    textArea = table.area(""+rules.deconstructRefundMultiplier, text -> rules.deconstructRefundMultiplier=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("enemyCoreBuildRadius: "+rules.enemyCoreBuildRadius);
    } );
    textArea = table.area(""+rules.enemyCoreBuildRadius, text -> rules.enemyCoreBuildRadius=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("dropZoneRadius: "+rules.dropZoneRadius);
    } );
    textArea = table.area(""+rules.dropZoneRadius, text -> rules.dropZoneRadius=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("waveSpacing: "+rules.waveSpacing);
    } );
    textArea = table.area(""+rules.waveSpacing, text -> rules.waveSpacing=Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("winWave: "+rules.winWave);
    } );
    textArea = table.area(""+rules.winWave, text -> rules.winWave=(int)Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.add("").update(label-> {
      label.setText("unitCap: "+rules.unitCap);
    } );
    textArea = table.area(""+rules.unitCap, text -> rules.unitCap=(int)Strings.parseFloat(text,0f)).width(100).get();
    textArea.setMaxLength((Float.MAX_VALUE + "").length());
    textArea.setFilter(arc.scene.ui.TextField.TextFieldFilter.floatsOnly);
    table.row();
    table.check("lighting",rules.lighting,(b)->rules.lighting=b);
    table.row();
    table.check("enemyLights",rules.enemyLights,(b)->rules.enemyLights=b);
    table.row();
    table.button("edit",()-> mindustry.Vars.ui.picker.show(rules.ambientLight,c->rules.ambientLight=c));
    table.row();
    table.check("coreIncinerates",rules.coreIncinerates,(b)->rules.coreIncinerates=b);
    table.row();
  }
}
