package braindustry.gen;

import arc.graphics.Color;
import arc.math.geom.Vec2;
import arc.util.io.ReusableByteOutStream;
import arc.util.io.Writes;
import java.io.DataOutputStream;
import java.lang.Object;
import java.lang.String;
import mindustry.game.Team;
import mindustry.gen.Building;
import mindustry.gen.Player;
import mindustry.gen.Unit;
import mindustry.net.NetConnection;
import mindustry.type.UnitType;

/**
 * Autogenerated file. Do not modify!
 */
public class ModCall {
  private static final ReusableByteOutStream OUT = new ReusableByteOutStream(8192);

  private static final Writes WRITE = new Writes(new DataOutputStream(OUT));

  public static void checkStealthStatus(Player player, Unit unit, boolean inStealth) {
    braindustry.gen.ModNetServer.checkStealthStatus(player, unit, inStealth);
    if(mindustry.Vars.net.server() || mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-1;
      OUT.reset();
      if(mindustry.Vars.net.server()) {
        mindustry.io.TypeIO.writeEntity(WRITE, player);
      }
      mindustry.io.TypeIO.writeUnit(WRITE, unit);
      WRITE.bool(inStealth);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  static void checkStealthStatus__forward(NetConnection exceptConnection, Player player, Unit unit,
      boolean inStealth) {
    if(mindustry.Vars.net.server() || mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-1;
      OUT.reset();
      if(mindustry.Vars.net.server()) {
        mindustry.io.TypeIO.writeEntity(WRITE, player);
      }
      mindustry.io.TypeIO.writeUnit(WRITE, unit);
      WRITE.bool(inStealth);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.sendExcept(exceptConnection, packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void damageAllUnits() {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.damageAllUnits(mindustry.Vars.player);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-2;
      OUT.reset();
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void entitySnapshot(NetConnection playerConnection, short amount, short dataLen,
      byte[] data) {
    if(mindustry.Vars.net.server()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)2;
      packet.type = (byte)-3;
      OUT.reset();
      WRITE.s(amount);
      WRITE.s(dataLen);
      mindustry.io.TypeIO.writeBytes(WRITE, data);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      playerConnection.send(packet, mindustry.net.Net.SendMode.udp);
    }
  }

  public static void entityZEROSnapshot(NetConnection playerConnection, short amount, short dataLen,
      byte[] data) {
    if(mindustry.Vars.net.server()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)2;
      packet.type = (byte)18;
      OUT.reset();
      WRITE.s(amount);
      WRITE.s(dataLen);
      mindustry.io.TypeIO.writeBytes(WRITE, data);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      playerConnection.send(packet, mindustry.net.Net.SendMode.udp);
    }
  }

  public static void healAllUnits() {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.healAllUnits(mindustry.Vars.player);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-4;
      OUT.reset();
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void killAllUnits() {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.killAllUnits(mindustry.Vars.player);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-5;
      OUT.reset();
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void pickedUnitPayload(Unit unit, Unit target) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.input.ModInput.pickedUnitPayload(unit, target);
    }
    if(mindustry.Vars.net.server()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-6;
      OUT.reset();
      mindustry.io.TypeIO.writeUnit(WRITE, unit);
      mindustry.io.TypeIO.writeUnit(WRITE, target);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void requestUnitPayload(Player player, Unit target) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.input.ModInput.requestUnitPayload(player, target);
    }
    if(mindustry.Vars.net.server() || mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-7;
      OUT.reset();
      if(mindustry.Vars.net.server()) {
        mindustry.io.TypeIO.writeEntity(WRITE, player);
      }
      mindustry.io.TypeIO.writeUnit(WRITE, target);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void sendChatMessage(String message) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.core.ModNetClient.sendChatMessage(mindustry.Vars.player, message);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)45;
      OUT.reset();
      mindustry.io.TypeIO.writeString(WRITE, message);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void setNewUnit(UnitType type) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.setNewUnit(mindustry.Vars.player, type);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-8;
      OUT.reset();
      braindustry.io.ModTypeIO.writeUnitType(WRITE, type);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void setServerCheatLevel(int level) {
    if(mindustry.Vars.net.client() || !mindustry.Vars.net.active()) {
      braindustry.core.ModNetClient.setServerCheatLevel(level);
    }
    if(mindustry.Vars.net.server()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-9;
      OUT.reset();
      WRITE.i(level);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void setStealthStatus(Unit unit, boolean inStealth, float value) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.setStealthStatus(mindustry.Vars.player, unit, inStealth, value);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-10;
      OUT.reset();
      mindustry.io.TypeIO.writeUnit(WRITE, unit);
      WRITE.bool(inStealth);
      WRITE.f(value);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void setTeam(Team team) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.setTeam(mindustry.Vars.player, team);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-11;
      OUT.reset();
      braindustry.io.ModTypeIO.writeTeam(WRITE, team);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void setUnit(Unit unit) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.setUnit(mindustry.Vars.player, unit);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-12;
      OUT.reset();
      mindustry.io.TypeIO.writeUnit(WRITE, unit);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void showTeleportCircles(Player player, float x, float y, float radius, Color first,
      Color second, float fromRadius, float toRadius) {
    if(mindustry.Vars.net.client() || !mindustry.Vars.net.active()) {
      braindustry.core.ModNetClient.showTeleportCircles(player, x, y, radius, first, second, fromRadius, toRadius);
    }
    if(mindustry.Vars.net.server() || mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-13;
      OUT.reset();
      if(mindustry.Vars.net.server()) {
        mindustry.io.TypeIO.writeEntity(WRITE, player);
      }
      WRITE.f(x);
      WRITE.f(y);
      WRITE.f(radius);
      mindustry.io.TypeIO.writeColor(WRITE, first);
      mindustry.io.TypeIO.writeColor(WRITE, second);
      WRITE.f(fromRadius);
      WRITE.f(toRadius);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  static void showTeleportCircles__forward(NetConnection exceptConnection, Player player, float x,
      float y, float radius, Color first, Color second, float fromRadius, float toRadius) {
    if(mindustry.Vars.net.server() || mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-13;
      OUT.reset();
      if(mindustry.Vars.net.server()) {
        mindustry.io.TypeIO.writeEntity(WRITE, player);
      }
      WRITE.f(x);
      WRITE.f(y);
      WRITE.f(radius);
      mindustry.io.TypeIO.writeColor(WRITE, first);
      mindustry.io.TypeIO.writeColor(WRITE, second);
      WRITE.f(fromRadius);
      WRITE.f(toRadius);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.sendExcept(exceptConnection, packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void spawnUnits(UnitType type, float x, float y, int amount, boolean spawnerByCore,
      Team team) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.spawnUnits(mindustry.Vars.player, type, x, y, amount, spawnerByCore, team);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-14;
      OUT.reset();
      braindustry.io.ModTypeIO.writeUnitType(WRITE, type);
      WRITE.f(x);
      WRITE.f(y);
      WRITE.i(amount);
      WRITE.bool(spawnerByCore);
      braindustry.io.ModTypeIO.writeTeam(WRITE, team);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void stateSnapshot(NetConnection playerConnection, float waveTime, int wave,
      int enemies, boolean paused, boolean gameOver, int timeData, short coreDataLen,
      byte[] coreData) {
    if(mindustry.Vars.net.server()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)2;
      packet.type = (byte)-15;
      OUT.reset();
      WRITE.f(waveTime);
      WRITE.i(wave);
      WRITE.i(enemies);
      WRITE.bool(paused);
      WRITE.bool(gameOver);
      WRITE.i(timeData);
      WRITE.s(coreDataLen);
      mindustry.io.TypeIO.writeBytes(WRITE, coreData);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      playerConnection.send(packet, mindustry.net.Net.SendMode.udp);
    }
  }

  public static void tileConfig(Player player, Building build, Object value) {
    braindustry.input.ModInput.tileConfig(player, build, value);
    if(mindustry.Vars.net.server() || mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-16;
      OUT.reset();
      if(mindustry.Vars.net.server()) {
        mindustry.io.TypeIO.writeEntity(WRITE, player);
      }
      mindustry.io.TypeIO.writeBuilding(WRITE, build);
      braindustry.io.ModTypeIO.writeObject(WRITE, value);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  static void tileConfig__forward(NetConnection exceptConnection, Player player, Building build,
      Object value) {
    if(mindustry.Vars.net.server() || mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-16;
      OUT.reset();
      if(mindustry.Vars.net.server()) {
        mindustry.io.TypeIO.writeEntity(WRITE, player);
      }
      mindustry.io.TypeIO.writeBuilding(WRITE, build);
      braindustry.io.ModTypeIO.writeObject(WRITE, value);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.sendExcept(exceptConnection, packet, mindustry.net.Net.SendMode.tcp);
    }
  }

  public static void tpAllUnits(Vec2 pos) {
    if(mindustry.Vars.net.server() || !mindustry.Vars.net.active()) {
      braindustry.gen.ModNetServer.tpAllUnits(mindustry.Vars.player, pos);
    }
    if(mindustry.Vars.net.client()) {
      mindustry.net.Packets.InvokePacket packet = arc.util.pooling.Pools.obtain(mindustry.net.Packets.InvokePacket.class, mindustry.net.Packets.InvokePacket::new);
      packet.priority = (byte)0;
      packet.type = (byte)-17;
      OUT.reset();
      mindustry.io.TypeIO.writeVec2(WRITE, pos);
      packet.bytes = OUT.getBytes();
      packet.length = OUT.size();
      mindustry.Vars.net.send(packet, mindustry.net.Net.SendMode.tcp);
    }
  }
}
