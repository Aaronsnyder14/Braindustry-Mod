package braindustry.gen;

import mindustry.gen.RemoteReadClient;

import arc.util.io.Reads;

/**
 * Autogenerated file. Do not modify!
 */
public class ModRemoteReadClient {
  public static void readPacket(Reads read, int id) {
    if(id == -1) {
      try {
        mindustry.gen.Player player = mindustry.io.TypeIO.readEntity(read);
        mindustry.gen.Unit unit = braindustry.io.ModTypeIO.readUnit(read);
        boolean inStealth = read.bool();
        braindustry.gen.ModNetServer.checkStealthStatus(player, unit, inStealth);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'checkStealthStatus'!", e);
      }
    } else if(id == -3) {
      try {
        short amount = read.s();
        short dataLen = read.s();
        byte[] data = mindustry.io.TypeIO.readBytes(read);
        braindustry.core.ModNetClient.entitySnapshot(amount, dataLen, data);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'entitySnapshot'!", e);
      }
    } else if(id == 18) {
      try {
        short amount = read.s();
        short dataLen = read.s();
        byte[] data = mindustry.io.TypeIO.readBytes(read);
        braindustry.core.ModNetClient.entityZEROSnapshot(amount, dataLen, data);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'entityZEROSnapshot'!", e);
      }
    } else if(id == -6) {
      try {
        mindustry.gen.Unit unit = braindustry.io.ModTypeIO.readUnit(read);
        mindustry.gen.Unit target = braindustry.io.ModTypeIO.readUnit(read);
        braindustry.input.ModInput.pickedUnitPayload(unit, target);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'pickedUnitPayload'!", e);
      }
    } else if(id == -7) {
      try {
        mindustry.gen.Player player = mindustry.io.TypeIO.readEntity(read);
        mindustry.gen.Unit target = braindustry.io.ModTypeIO.readUnit(read);
        braindustry.input.ModInput.requestUnitPayload(player, target);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'requestUnitPayload'!", e);
      }
    } else if(id == -9) {
      try {
        int level = read.i();
        braindustry.core.ModNetClient.setServerCheatLevel(level);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'setServerCheatLevel'!", e);
      }
    } else if(id == -13) {
      try {
        mindustry.gen.Player player = mindustry.io.TypeIO.readEntity(read);
        float x = read.f();
        float y = read.f();
        float radius = read.f();
        arc.graphics.Color first = mindustry.io.TypeIO.readColor(read);
        arc.graphics.Color second = mindustry.io.TypeIO.readColor(read);
        float fromRadius = read.f();
        float toRadius = read.f();
        braindustry.core.ModNetClient.showTeleportCircles(player, x, y, radius, first, second, fromRadius, toRadius);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'showTeleportCircles'!", e);
      }
    } else if(id == -15) {
      try {
        float waveTime = read.f();
        int wave = read.i();
        int enemies = read.i();
        boolean paused = read.bool();
        boolean gameOver = read.bool();
        int timeData = read.i();
        short coreDataLen = read.s();
        byte[] coreData = mindustry.io.TypeIO.readBytes(read);
        braindustry.core.ModNetClient.stateSnapshot(waveTime, wave, enemies, paused, gameOver, timeData, coreDataLen, coreData);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'stateSnapshot'!", e);
      }
    } else if(id == -16) {
      try {
        mindustry.gen.Player player = mindustry.io.TypeIO.readEntity(read);
        mindustry.gen.Building build = mindustry.io.TypeIO.readBuilding(read);
        java.lang.Object value = braindustry.io.ModTypeIO.readObject(read);
        braindustry.input.ModInput.tileConfig(player, build, value);
      } catch (java.lang.Exception e) {
        throw new java.lang.RuntimeException("Failed to read remote method 'tileConfig'!", e);
      }
    } else {
      throw new braindustry.net.ModNet.SuccessfulException();
    }
  }
}
